. .\CI\CI_Utils.ps1  | out-null


<#
$xml: xml file path
$scriptFile: The file will be executed on VM
$remoteDir: This directory on VM is stored the files from the local
$toolsParentDir: This directory on local is the parent directory of tools subdirectory
$scriptFilePara: The parameters for script file 
$logFileOnVM: The log name generated by the script on VM
$logFileDirOnLocal: This directory is stored the log copied from VM 
$timeout: The script file must be done in this time

Example:
$remoteDir = "/tmp"
$logFile = "autobuild.log"
ExecuteScriptFromLocalToVmAndCheckResult  "$pwd\BIS\$os_on_host\lisa\run.xml" "./CI/autobuildtest.sh" $remoteDir  "CI" " --buildworld --srcURL https://svn.FreeBSD.org/base/ --log $remoteDir/$logFile " "$remoteDir/$logFile"  $pwd  "3600"
#>
Function ExecuteScriptFromLocalToVmAndCheckResult ( [String]$xml,[String]$scriptFile,[String]$remoteDir,[String]$toolsParentDir,[String]$scriptFilePara,[String]$logFileOnVM,[String]$logFileDirOnLocal,[String]$timeout)
{

    $xmlFilenameForVM = [xml] (Get-Content -Path  $xml)  2>null
    $vm = $xmlFilenameForVM.config.VMs.vm

    cd .\$toolsParentDir
    WaitSSHLoginPrepare $vm.sshKey  $vm.ipv4 
    cd ..

    #Send the script from local to VM
    $sts = SendFileToVMUntilTimeout  $vm $scriptFile $remoteDir $toolsParentDir 
    if( $sts -ne 0 )
    {
        Write-Error  "Error: $($vm.vmName) send $scriptFile to $($vm.vmName) failed"
        return 1
    }
    Write-Output "Log: $($vm.vmName) send $scriptFile to $($vm.vmName) successfully"

    #Send command from local host to VM 
    #Make sure the format of script on VM is unix 
    $fileName = [io.path]::GetFileName("$scriptFile")
    $FreeBSDFileName = "$remoteDir/$fileName"
    Write-Output "Info: To set the format of script $FreeBSDFileName on $($vm.vmName) being unix"
    if (-not (SendCommandToVMUntilTimeout $vm "dos2unix  $FreeBSDFileName" $toolsParentDir "120") )
    {
        Write-Error "Error: Unable to set the format of script $FreeBSDFileName on $($vm.vmName) being unix"
        return 1
    }
    Write-Output "Log: Set the format of script $FreeBSDFileName on $($vm.vmName) being unix successfully"

    #To set x bit of the script on VM
    Write-Output  "Info: To set x bit of the script $FreeBSDFileName on $($vm.vmName)"
    if (-not (SendCommandToVMUntilTimeout $vm "chmod 755 $FreeBSDFileName"  $toolsParentDir "120") )
    {
        Write-Error "Error: $($vm.vmName) unable to set x bit on test $FreeBSDFileName script"
        return 1
    }


    #Send command to run script on VM 
    #Note: This script will reboot the VM !!!
    Write-Output "Info: To run the script $FreeBSDFileName on $($vm.vmName) for Syncing, building and installing kernel/world"
    Write-Output "Info: This step will take a very long time ..."
    if (-not (SendCommandToVMUntilTimeout $vm "$FreeBSDFileName  $scriptFilePara"  $toolsParentDir $timeout) )
    {
        Write-Error  "Error: $($vm.vmName) unable to run $FreeBSDFileName script"
        return 1
    } 

    Write-Output  "Info: The former step will reboot the VM, so please wait VM boot completely"
    Write-Output  "Info: It will takes more than one minute, please wait with patience"
    $sts = WaitVMBootFinish $vm 
    if( $sts -ne 0 )
    {
        return 1
    }

    #Get log file from VM to local host        
    Write-Output  "Info: Get log file $logFileOnVM from VM to local host"
    $sts = GetFileFromVMUntilTimeout  $vm $logFileOnVM $logFileDirOnLocal  $toolsParentDir   
    if( $sts -ne 0 )
    {
        Write-Error "Error: $($vm.vmName) get $logFileOnVM from $($vm.vmName) failed"
        return 1
    }
    
    $name = [io.path]::GetFileName("$logFileOnVM")
    $sts = CheckErrorLogInFile "$logFileDirOnLocal\$name"
    if( $sts -ne 0 )
    {
        Write-Error "Error: There is some errors in $logFileDirOnLocal\$name"
        return 1
    }

    return 0

}


Function CIUpdateConfig([string]$originalConfigFile, [string]$CIFolder, [string]$newConfigFileName)
{
    <#
    Usage:
        CIUpdateConfig $originalConfigFile $CIFolder $newConfigFileName
    Description:
        This is a function to update cloud configuration for CI job.
    #>
    $newConfigFile = "$CIFolder\$newConfigFileName"
    
    # The $newConfigFileName is a copy of $originalConfigFile. All changes will be written into the $newConfigFileName
    Copy-Item $originalConfigFile $newConfigFile

    #For FreeBSD 10.3, the VM bus protocol version is not supported
    if( $env:VMName -eq "FreeBSD10.3")
    {
        $content = get-content $newConfigFile
        clear-content $newConfigFile
        foreach ($line in $content)
        {
            $liner = $line.Replace("<suiteTest>VmbusProtocolVersion</suiteTest>","")
            Add-content $newConfigFile -Value $liner
        }
        sleep 1
    }

    [xml]$xml = Get-Content "$newConfigFile"

    # Update parameter of OnGuestReadHostKvpData test case
    $target = $xml.config.testCases.test  | Where {$_.testName -eq "OnGuestReadHostKvpData"}
    $i = 0
    foreach( $param in $target.testparams.param)
    {
        $i++
        if($param | Select-String -pattern "Value=.*")
        {
            $myFQDN=(Get-WmiObject win32_computersystem).DNSHostName+"."+(Get-WmiObject win32_computersystem).Domain
            Write-Host "FQDN of host: $myFQDN"
            $target.testparams.ChildNodes[$i-1].InnerText="Value=$myFQDN"
            break
        }
    }

    # Get ipv4 address of the env vm
    $env_Vmname = "FreebsdTestEnv" #The environment vm
    DoStartVM $env_Vmname "localhost"      # Start the vm if it's not runnig
    $env_ipv4_addr = GetIPv4UntilTimeOut $env_Vmname "localhost"
    if( $env_ipv4_addr -eq 1 )
    {
        "Error: Cannot get IPv4 via KVP of the env vm $env_Vmname."
        return 1
    }

    # Update parameter of ExternalSynthNetAdapter test case
    $target = $xml.config.testCases.test  | Where {$_.testName -eq "ExternalSynthNetAdapter"}
    $i = 0
    foreach( $param in $target.testparams.param)
    {
        $i++
        if($param | Select-String -pattern "TARGET_ADDR=.*")
        {
            $target.testparams.ChildNodes[$i-1].InnerText="TARGET_ADDR=$env_ipv4_addr"
            break
        }
    }

    # Update parameter of PingSizeInterval test case
    $target = $xml.config.testCases.test  | Where {$_.testName -eq "PingSizeInterval"}
    $i = 0
    foreach( $param in $target.testparams.param)
    {
        $i++
        if($param | Select-String -pattern "TARGET_ADDR=.*")
        {
            $target.testparams.ChildNodes[$i-1].InnerText="TARGET_ADDR=$env_ipv4_addr"
            break
        }
    }

    # Update parameter of ExternalMultipleSynthNetAdapter test case
    $target = $xml.config.testCases.test  | Where {$_.testName -eq "ExternalMultipleSynthNetAdapter"}
    $i = 0
    foreach( $param in $target.testparams.param)
    {
        $i++
        if($param | Select-String -pattern "TARGET_ADDR=.*")
        {
            $target.testparams.ChildNodes[$i-1].InnerText="TARGET_ADDR=$env_ipv4_addr"
            break
        }
    }

    # Update parameter of BuildKernel test case
    $GitBranch = $env:GitBranch
    $target = $xml.config.testCases.test  | Where {$_.testName -eq "BuildKernel"}
    $i = 0
    foreach( $param in $target.testparams.param)
    {
        $i++
        if($param | Select-String -pattern "GIT_BRANCH=.*")
        {
            $target.testparams.ChildNodes[$i-1].InnerText="GIT_BRANCH=$GitBranch"
            break
        }
    }

    $GitCommitID = $env:GitCommitID
    if( $GitCommitID -and $GitCommitID -ne "None" )
    {
        $target = $xml.config.testCases.test  | Where {$_.testName -eq "BuildKernel"}
        $i = 0
        foreach( $param in $target.testparams.param)
        {
            $i++
            if($param | Select-String -pattern "GIT_COMMITID=.*")
            {
                $target.testparams.ChildNodes[$i-1].InnerText="GIT_COMMITID=$GitCommitID"
                break
            }
        }    
    }


    # Update vmName
    $xml.config.VMs.vm.vmName = $env:VMName
    
    # Update test suite
    $xml.config.VMs.vm.suite = $env:TestSuite
    
    # Update test hvServer
    $server = "localhost"
    $xml.config.VMs.vm.hvServer = $server
    
    # Update ipv4 address
    $ipv4_addr = GetIPv4UntilTimeOut $env:VMName $server
    if( $ipv4_addr -eq 1 )
    {
        "Error: Cannot get IPv4 via KVP."
        return 1
    }
    $xml.config.VMs.vm.ipv4 = [string]$ipv4_addr

    if($env:DebugCases -and $env:DebugCases.Trim() -ne "")
    {
        $debugCycle = $xml.SelectSingleNode("/config/testSuites/suite[suiteName=`"debug`"]")
        if($debugCycle)
        {
            foreach($testcase in $debugCycle.suiteTests)
            {
                $testcase = $debugCycle.RemoveChild($testcase)
            }
        }
        else
        {
            $debugCycle = $xml.CreateElement("suite")
            $name = $xml.CreateElement("suiteName")
            $name.InnerText = "DEBUG"
            $name = $debugCycle.AppendChild($name)
            $debugCycle = $xml.DocumentElement.testSuites.AppendChild($debugCycle)
        }

        $debugCase = $xml.CreateElement("suiteTests")
        foreach($cn in ($env:DebugCases).Trim().Split(","))
        {
            $debugCaseName = $xml.CreateElement("suiteTest")
            $debugCaseName.InnerText = $cn.Trim()
            $debugCaseName = $debugCase.AppendChild($debugCaseName)
            $debugCase = $debugCycle.AppendChild($debugCase)
        }
    }

    $xml.Save("$newConfigFile")
    
    return 0
}

"`n`n"
"#############################################################"
"`n"
"CI job name: $env:JOB_NAME"
"VM name: $env:VMName"
"Test suite: $env:TestSuite"
"Git URL: $env:SoureCodeURL"
"Git branch: $env:GitBranch"
"`n"
"#############################################################"
"`n`n"

$env:BuildWorld = $False
$env:BuildKernel = $False   # Build the kernel in a test case, NOT here now

"Begin to prepare the xml for test"

# Copy certificate
$dependencyFilePath = $env:DepFilePath
$os_on_host = "WS2012R2"
$sshDir = "$pwd" +"\BIS\$os_on_host\lisa\ssh"
$status = Test-Path $sshDir  
if( $status -ne "True" )
{
    New-Item  -ItemType "Directory" $sshDir
}
"To copy certificate"
Copy-Item $dependencyFilePath\ssh\*   $sshDir

$global:testReport = "$pwd\CI\report.xml"
$status = Test-Path $testReport  
if( $status -eq "True" )
{
    "Delete the old $testReport"
    Remove-Item   $testReport  -Force
}

$global:reportCompressFile = "$pwd\CI\logs.zip"
$status = Test-Path $reportCompressFile  
if( $status -eq "True" )
{
    "Delete the old $reportCompressFile"
    Remove-Item  $reportCompressFile  -Force
}

# Copy tools
$binDir = "$pwd" + "\BIS\$os_on_host\lisa\bin"
$status = Test-Path $binDir 
if( $status -ne "True" )
{
    New-Item  -ItemType "Directory" $binDir
}
"To copy tools"
Copy-Item $dependencyFilePath\tools\*   $binDir


"The vm name is:  $env:VMName"
#To stop the vm before test
$sts = DoStopVM $env:VMName "localhost"
if($sts[-1] -ne 0)
{
    "Error: Stop the vm failed."
    return 1
}

# Update the memory on the VM
$memory = 2048 * 1MB    #Memory is 2GB
$mem = Set-VM -Name $env:VMName -ComputerName "localhost" -MemoryStartupBytes $memory
if ($? -eq "True")
{
    "Update memory successfully."
}
else
{
    "Error: Unable to update memory."
    return 1
}

#Delete all IDE and SCSI disks except the OS disk
DeleteDisks $env:VMName "localhost"

#Delete the snapshort
if( $env:BuildKernel -eq $True )
{
    $sts = DeleteSnapshot $env:VMName "localhost" "ICABase" 
    if($sts[-1] -ne 0)
    {
        return 1
    }
}

# Create the base snapshot if it doesn't exist
$existBaseSnapshot = $False
$baseSnapshotName = "Base"
$snaps = Get-VMSnapshot -VMName $env:VMName -ComputerName "localhost" 
foreach($s in $snaps)
{
    if ($s.Name -eq $baseSnapshotName)
    {
        $existBaseSnapshot = $True
        break
    }
}

if ( $existBaseSnapshot -eq $False )
{
    $sts = CreateSnapshot $env:VMName "localhost"  $baseSnapshotName
    if($sts[-1] -ne 0)
    {
        "Warning: Create $baseSnapshotName snapshort failed."
    }
}


"Now, it begins to start the $env:VMName vm and please wait for a moment..."
$sts = DoStartVM $env:VMName "localhost"
if($sts[-1] -ne 0)
{
    return 1
}


# Update config for CI Run
$XmlConfigFile = "FreeBSD_WS2012R2.xml"
$osversion = [environment]::OSVersion.Version.Build
if( $osversion -eq "9200" )   #9200 means the host os is Windows Server 2012
{
    "The test is runnig on Windows Server 2012."
    $XmlConfigFile = "FreeBSD_WS2012.xml"
}

if( Test-Path "$pwd\BIS\$os_on_host\lisa\xml\freebsd\$XmlConfigFile" )
{
    $sts = CIUpdateConfig "$pwd\BIS\$os_on_host\lisa\xml\freebsd\$XmlConfigFile" "$pwd\BIS\$os_on_host\lisa" run.xml 
    if( $sts[-1] -ne 0 )
    {
        "Failed to prepare the $pwd\BIS\$os_on_host\lisa\run.xml and abort the test."
        return 1
    }
}
else
{
    #TODO
    return 1
}

"Prepare the xml for test done"

#Begin to build and install kernel/world if necessary
$remoteDir = "/usr"
$logFile = "autobuild.log"
$branch = $env:GitBranch
$bisCodeDir = "BIS"
$ciCodeDir = "CI"

$citool = "$pwd" + "\CI\tools"
$status = Test-Path $citool 
if( $status -ne "True" )
{
    New-Item  -ItemType "Directory" $citool
}
"To copy tools"
Copy-Item $dependencyFilePath\tools\*  $citool

if( $env:SoureCodeURL -eq $null -or $env:SoureCodeURL -eq "" -or $env:SoureCodeURL -eq " " )
{
    $env:BuildKernel = $False
}

if( $env:BuildWorld -eq $True )
{
    "Begin to build and install world&kernel and it will take a very long time ..."
    $sts=ExecuteScriptFromLocalToVmAndCheckResult  ".\$bisCodeDir\$os_on_host\lisa\run.xml" ".\$ciCodeDir\autobuild.sh" $remoteDir  $ciCodeDir " --buildworld  -b $branch  --srcURL $env:SoureCodeURL --log $remoteDir/$logFile " "$remoteDir/$logFile"  $pwd  "36000"
    if($sts[-1] -ne 0)
    {
        "Build & install world&kernel failed"
        "----------------------- Log from vm -----------------------"
        Get-Content $logFile
        return 1
    }
}
elseif( $env:BuildKernel -eq $True )
{
    "Begin to build and install kernel and it will take a long time ..."
    $sts=ExecuteScriptFromLocalToVmAndCheckResult  ".\$bisCodeDir\$os_on_host\lisa\run.xml" ".\$ciCodeDir\autobuild.sh" $remoteDir  $ciCodeDir " -b $branch --srcURL $env:SoureCodeURL --log $remoteDir/$logFile " "$remoteDir/$logFile"  $pwd  "108000"
    if($sts[-1] -ne 0)
    {
        "Build & install kernel failed"
        "----------------------- Log from vm -----------------------"
        Get-Content $logFile
        return 1
    }
}

# Start the vm if it's not runnig
DoStartVM $env:VMName "localhost"

#Update the time zone of VM
$xmlContent= [xml] (Get-Content -Path  ".\$bisCodeDir\$os_on_host\lisa\run.xml")  2>null
$vm = $xmlContent.config.VMs.vm 
UpdateVmTimezoneBasedOnHost $vm $ciCodeDir

#To stop the vm before creating a snapshort
$sts = DoStopVM $env:VMName "localhost"
if($sts[-1] -ne 0)
{
    "Warning: Stop the vm failed before creating a snapshort."
}

#Create a snapshort named "ICABase" before test cases
if( $env:BuildKernel -eq $True )
{
    $sts = CreateSnapshot $env:VMName "localhost"  "ICABase"
    if($sts[-1] -ne 0)
    {
        "Warning: Create snapshort failed before runnig test cases."
    }
}



"Begin to add 3 passthrough disks in Computer Management for Pass Through Drive feature test."
$HyperVDir = "C:\Users\Public\Documents\Hyper-V\Virtual hard disks\"
$sts = AddPassThroughDisks  $HyperVDir "localhost"
if( $sts[-1] -ne 0 )
{
    "Add passthrough disks in Computer Management failed."
    "Warning: The test will be continued, but some test cases based on passthrough disks will be failed."
}
else
{
    "Add 3 passthrough disks in Computer Management successfully."
}


#Now, everything is OK and begins to run the test cases
"Ready to run test cases"
cd .\BIS\$os_on_host\lisa
.\lisa run run.xml
"Run test cases done"



